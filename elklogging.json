{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Parameters" : {		 			  
			"mysubnets": {
				"Description" : "My subnets from my VPC",
				"Type" : "List<AWS::EC2::Subnet::Id>",
				"Default": "DEFAULTSUBNETS"
			},
			"securitygroup": {
				"Description" : "My security group",
				"Type" : "String",
				"Default": "DEFAULTSECURITYGROUP"
			}
	  },
  "Resources": {
	  "fnbcreatepolicyelkCWLtoKinesis": {
		  "Type" : "AWS::IAM::ManagedPolicy",		  
		  "Properties" : {		  
			  "ManagedPolicyName" : "elkloggingCWLtoKinesis",
			  "Description" : "This Policy has been created for subscribing Clodwatch Log group to Kinesis Stream",
			  "PolicyDocument" : {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Action": "kinesis:PutRecord",
							"Resource": { "Fn::Join" : [ "", [ "arn:aws:kinesis:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":stream/elklogging"] ] }
							
						}
					]
				}
			}
	  },
	  "fnbcreateroleelkCWLtoKinesis": {
		  "Type" : "AWS::IAM::Role",
		  "Properties" : {
			  "RoleName" : "elkloggingCWLtoKinesis",
			  "ManagedPolicyArns" : [{ "Fn::Join" : [ "", [ "arn:aws:iam::" ,{ "Ref": "AWS::AccountId"},":policy/elkloggingCWLtoKinesis"] ] }],
			  "Description" : "This Role has been created for subscribing Clodwatch Log group to Kinesis Stream",		   
			  "Tags" : [ {"Key": "Name", "Value": "elkloggingCWLtoKinesis"},{"Key": "Team", "Value": "fil-ent-monitoring"} ],
			  "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "logs.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
			},
			"DependsOn" : "fnbcreatepolicyelkCWLtoKinesis"
	  },	
	  "fnbcreatepolicyelklogging": {
		  "Type" : "AWS::IAM::ManagedPolicy",
		  "Properties" : {		  
			  "ManagedPolicyName" : "elklogging",
			  "Description" : "This Role has been created for reading logs from Kinesis stream and SQS Dead Letter Queue via Lambda Functions and sending it to Enterprise ELK",
			  "PolicyDocument" : {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "VisualEditor0",
							"Effect": "Allow",
							"Action": [
								"sqs:DeleteMessage",
								"sqs:GetQueueUrl",
								"sqs:ChangeMessageVisibility",
								"kinesis:SubscribeToShard",
								"sqs:UntagQueue",
								"logs:*",
								"sqs:ReceiveMessage",
								"kinesis:DescribeStreamConsumer",
								"sqs:SendMessage",
								"kinesis:GetShardIterator",
								"sqs:GetQueueAttributes",
								"kinesis:DescribeStream",
								"sqs:ListQueueTags",
								"kinesis:ListTagsForStream",
								"sqs:TagQueue",
								"s3:GetObject",
								"sqs:ListDeadLetterSourceQueues",
								"kinesis:DescribeStreamSummary",
								"sqs:PurgeQueue",
								"sqs:DeleteQueue",
								"kinesis:GetRecords",
								"sqs:CreateQueue",
								"sqs:SetQueueAttributes"
							],
							"Resource": [								
								{ "Fn::Join" : [ "", [ "arn:aws:logs:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":log-group:elklogging*:log-stream:*"] ] },
								{ "Fn::Join" : [ "", [ "arn:aws:sqs:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":elklogging-dlqsqs"] ] },
								{ "Fn::Join" : [ "", [ "arn:aws:s3:::elklogs-" , { "Ref": "AWS::AccountId"} ,"/*" ] ] },
								{ "Fn::Join" : [ "", [ "arn:aws:kinesis:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":*/elklogging/consumer/*:*"] ] },
								{ "Fn::Join" : [ "", [ "arn:aws:kinesis:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":stream/elklogging"] ] }
							]
						},
						{
							"Sid": "VisualEditor1",
							"Effect": "Allow",
							"Action": [														
								"tag:GetResources",
								"kinesis:ListShards",
								"kinesis:ListStreamConsumers",								
								"kinesis:ListStreams",
								"kinesis:DescribeLimits",
								"logs:DeleteResourcePolicy",
								"logs:CancelExportTask",
								"logs:DeleteLogDelivery",
								"logs:DescribeQueryDefinitions",
								"logs:GetLogDelivery",
								"logs:ListLogDeliveries",
								"logs:PutDestination",
								"logs:DescribeResourcePolicies",
								"logs:DescribeDestinations",
								"logs:DescribeQueries",								
								"logs:PutDestinationPolicy",
								"logs:StopQuery",
								"logs:TestMetricFilter",
								"logs:DeleteDestination",
								"logs:DeleteQueryDefinition",
								"logs:PutQueryDefinition",
								"logs:CreateLogDelivery",
								"logs:PutResourcePolicy",
								"logs:DescribeExportTasks",
								"logs:GetQueryResults",								
								"logs:UpdateLogDelivery",
								"logs:GetLogRecord",
								"sqs:ListQueues",
								"sqs:SendMessage",
								"sqs:ReceiveMessage",
								"sqs:DeleteMessage",
								"sqs:GetQueueAttributes",
								"ec2:DescribeVpcs",								
								"ec2:DescribeSubnets",
								"ec2:CreateNetworkInterface",
								"ec2:DescribeNetworkInterfaces",
								"ec2:DeleteNetworkInterface",
								"ec2:DescribeRegions",
								"ec2:DescribeInstances"								
							],
							"Resource": "*"
						},
						{
							"Sid": "VisualEditor2",
							"Effect": "Allow",
							"Action": "logs:*",
							"Resource": { "Fn::Join" : [ "", [ "arn:aws:logs:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":elklogging*"] ] }
						}
					]
				}
			}
	}, 
	"fnbcreateroleelklogging": {
		  "Type" : "AWS::IAM::Role",
		  "Properties" : {
			  "RoleName" : "elklogging",
			  "ManagedPolicyArns" : [{ "Fn::Join" : [ "", [ "arn:aws:iam::" ,{ "Ref": "AWS::AccountId"},":policy/elklogging"] ] }],
			  "Description" : "This Role has been created for reading logs from Kinesis stream and SQS Dead Letter Queue via Lambda Functions and sending it to Enterprise ELK",		   
			  "Tags" : [ {"Key": "Name", "Value": "elklogging"},{"Key": "Team", "Value": "fil-ent-monitoring"} ],
			  "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
			},
			"DependsOn" : "fnbcreatepolicyelklogging"
	},	
   "fnbcreatekinesiselk": {
	  "Type" : "AWS::Kinesis::Stream",
	  "Properties" : {
		  "Name" : "elklogging",
		  "RetentionPeriodHours" : 24,
		  "ShardCount" : 1,		 
		  "Tags" : [ {"Key": "Name", "Value": "elklogging"},{"Key": "Team", "Value": "fil-ent-monitoring"} ]
		},
		"DependsOn" : "fnbcreateroleelklogging"
	},
	"fnbcreatesqsdlqlk": {
	  "Type" : "AWS::SQS::Queue",
	  "Properties" : {
		  "QueueName" : "elklogging",
		  "MessageRetentionPeriod" : 86400,
		  "MaximumMessageSize" : 262144,
		  "Tags" : [ {"Key": "Name", "Value": "elklogging"},{"Key": "Team", "Value": "fil-ent-monitoring"} ]
		},
		"DependsOn" : "fnbcreateroleelklogging"
	},
    "fnbcreatecloudwatchlambdaelk": {
      "Properties": {
        "Code": {
           "S3Bucket": { "Fn::Join" : [ "", [ "elklogs-" , { "Ref": "AWS::AccountId"} ] ] },
           "S3Key": "package-aws.zip"
        },
        "DeadLetterConfig": {
          "TargetArn": { "Fn::Join" : [ "", [ "arn:aws:sqs:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":elklogging"] ] }
							
        },
        "Description": "lambda function for Cloudwatch logs in Kinesis events",
        "Environment": {
          "Variables": {
            "BEAT_STRICT_PERMS": "false",
            "ENABLED_FUNCTIONS": "elklogging-cloudwatchlogs"
          }
        },
        "FunctionName": "elklogging-cloudwatchlogs",
        "Handler": "functionbeat-aws",
        "MemorySize": 128,
        "ReservedConcurrentExecutions": 5,
        "Role": { "Fn::Join" : [ "", [ "arn:aws:iam::" ,{ "Ref": "AWS::AccountId"},":role/elklogging"] ] },		
        "Runtime": "go1.x",
        "Timeout": 3,
        "VpcConfig": {
          "SecurityGroupIds": [{"Ref":"securitygroup"}],
          "SubnetIds": [{"Ref":"mysubnets"}]
        }
      },
	  "DependsOn" : "fnbcreatekinesiselk",
      "Type": "AWS::Lambda::Function"
    },
    "fnbcloudwatchlogskinesisLogGroup": {
      "Properties": {
        "LogGroupName": "/aws/lambda/elklogging-cloudwatchlogs"
      },
	  "DependsOn" : "fnbcreatecloudwatchlambdaelk",
      "Type": "AWS::Logs::LogGroup"
    },
    "fnbcreatecloudwatchlambdelkkinesistrigger": {
      "Properties": {
        "BatchSize": 100,
        "EventSourceArn": { "Fn::Join" : [ "", [ "arn:aws:kinesis:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":stream/elklogging"] ] },		 
        "FunctionName": {
          "Fn::GetAtt": [
            "fnbcreatecloudwatchlambdaelk",
            "Arn"
          ]
        },
        "ParallelizationFactor": 1,
        "StartingPosition": "TRIM_HORIZON"
      },
	  "DependsOn" : "fnbcreatekinesiselk",
      "Type": "AWS::Lambda::EventSourceMapping"
    },
	"fnbcreatedlqsqslambdaelk": {
      "Properties": {
        "Code": {
		  "S3Bucket": { "Fn::Join" : [ "", [ "elklogs-" , { "Ref": "AWS::AccountId"} ] ] },
          "S3Key": "package-aws.zip"
        },
        "Description": "lambda function for DLQ SQS events",
        "Environment": {
          "Variables": {
            "BEAT_STRICT_PERMS": "false",
            "ENABLED_FUNCTIONS": "elklogging-sqsdlq"
          }
        },
        "FunctionName": "elklogging-sqsdlq",
        "Handler": "functionbeat-aws",
        "MemorySize": 128,
        "ReservedConcurrentExecutions": 5,
        "Role": { "Fn::Join" : [ "", [ "arn:aws:iam::" ,{ "Ref": "AWS::AccountId"},":role/elklogging"] ] },	
        "Runtime": "go1.x",
        "Timeout": 3,
        "VpcConfig": {
          "SecurityGroupIds": [
            {
			  "Fn::GetAtt": [{"Ref":"securitygroup"} ]
			}
          ],
          "SubnetIds": [{"Ref":"mysubnets"}]
        }
      },
	  "DependsOn" : "fnbcreatesqsdlqlk",
      "Type": "AWS::Lambda::Function"
    },
    "fnbsqsLogGroup": {
      "Properties": {
        "LogGroupName": "/aws/lambda/elklogging-sqsdlq"
      },
	  "DependsOn" : "fnbcreatedlqsqslambdaelk",
      "Type": "AWS::Logs::LogGroup"
    },
    "fnbcreatedlqsqslambdaelksqstrigger": {
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": { "Fn::Join" : [ "", [ "arn:aws:sqs:" , { "Ref": "AWS::Region"},":",{ "Ref": "AWS::AccountId"},":elklogging"] ] },		
        "FunctionName": {
          "Fn::GetAtt": [
            "fnbcreatedlqsqslambdaelk",
            "Arn"
          ]
        }
      },
	  "DependsOn" : "fnbsqsLogGroup",
      "Type": "AWS::Lambda::EventSourceMapping"
    }
  }
}